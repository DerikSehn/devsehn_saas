// after changes run this command:
// 1: npx prisma generate
// 2: npx prisma migrate dev
// 3: a - update seed.ts  b - npx prisma db seed

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  accounts      Account[]
  images        Image[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  title       String
  description String
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  images      Image[]
}

// Comments my workaround for the problem with the model difficulty to get comments

model Comment {
  id          Int      @id @default(autoincrement())
  model       String
  field       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Image {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  url         String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  projectId   Int?
  userId      String?
  Project     Project?     @relation(fields: [projectId], references: [id])
  User        User?        @relation(fields: [userId], references: [id])
  Testimonial Testimonial?
  Service     Service[]
}

model Testimonial {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  job         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  image       Image?   @relation(fields: [imageId], references: [id])
  imageId     Int?     @unique
}

model Service {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  image       Image    @relation(fields: [imageId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imageId     Int
}

model EmailTemplate {
  id             Int            @id @default(autoincrement())
  keyword        String         @unique
  headerTitle    String
  headerSubtitle String
  buttonText     String
  buttonLink     String
  footerText     String
  content        EmailContent[]
  links          EmailLink[]
}

model EmailContent {
  id              Int            @id @default(autoincrement())
  heading         String
  paragraph       String
  EmailTemplate   EmailTemplate? @relation(fields: [emailTemplateId], references: [id])
  emailTemplateId Int?
}

model EmailLink {
  id              Int            @id @default(autoincrement())
  description     String
  href            String
  EmailTemplate   EmailTemplate? @relation(fields: [emailTemplateId], references: [id])
  emailTemplateId Int?
}
